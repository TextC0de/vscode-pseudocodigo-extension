{
  "name": "Pseudocodigo",
  "scopeName": "source.pscd",
  "foldingStartMarker": "(\\{|\\()",
  "foldingEndMarker": "(\\}|\\))",
  "fileTypes": [
    "pscd"
  ],
  "patterns": [
    {
      "include": "#code"
    }
  ],
  "repository": {
    "code": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#blocks"
        },
        {
          "include": "#vartypes"
        },
        {
          "include": "#functions"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#variables-after-aritmetic-operator"
        },
        {
          "include": "#variables-single-char"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.empty.pscd",
          "match": "/\\*\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.pscd"
            }
          }
        },
        {
          "name": "comment.block.pscd",
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.pscd"
            }
          },
          "end": "\\*/"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.pscd",
          "match": "\\b(?<![\\.0-9])([0-9]+)(?![\\.0-9])\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.pscd",
          "match": "(\\s++[oOyY]\\s++|NO|No|no)"
        },
        {
          "name": "keyword.operator.relational.pscd",
          "match": "<=|>=|<|>"
        },
        {
          "name": "keyword.operator.comparison.pscd",
          "match": "=|<>"
        },
        {
          "name": "keyword.operator.arithmetic.pscd",
          "match": "(?<!/)\\*\\*|(?<!\\*)/(?!/|\\*)|%|\\*(?<!/\\*)(?!/([^\\*]|$))|\\+|-|div|mod"
        },
        {
          "name": "keyword.operator.assignment.pscd",
          "match": "(<-|←)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.pscd",
          "begin": "\"|“",
          "end": "\"|”",
          "patterns": [
            {
              "name": "constant.character.escape.pscd",
              "match": "([\"|“|”])(?:(?=(\\\\?))\\2.)*?\\1"
            }
          ]
        },
        {
          "name": "string.quoted.single.pscd",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.pscd",
              "match": "(['])(?:(?=(\\\\?))\\2.)*?\\1"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.pscd",
          "match": "(?<=^|[\\s\\{\\}\\;\\:]|\\*\\/)(Algoritmo|ALGORITMO|SubAlgoritmo|Subalgoritmo|SUBALGORITMO|INICIO|FIN|Const|CONST|Var|VAR)\\b"
        }
      ]
    },
    "blocks": {
      "patterns": [
        {
          "name": "keyword.control.conditional.pscd",
          "match": "(?<=^|[\\s\\{\\}\\;\\:]|\\*\\/)(Si|Sino|SiNo|Entonces|entonces|FinSi|Desde|con\\spaso|Con\\sPaso|Con\\spaso|con\\sPaso|Hacer|hacer|Fin\\sDesde|Repetir|Hasta|hasta|Mientras|Fin\\sMientras|Según|Segun|Fin\\sSegún|Fin\\sSegun)\\b"
        }
      ]
    },
    "vartypes": {
      "patterns": [
        {
          "name": "support.class.builtin.pscd",
          "match": "(?<=^|[\\s\\{\\}\\;\\:]|\\*\\/)(Caracter|caracter|Carácter|carácter|Cadena|cadena|Real|real|Entero|entero|Logico|logico|Booleano|booleano)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.pscd",
          "match": "(?<![)@.$#\u00B4\"'\\]-~\\\\])([A-Za-z_]\\w*)(?=\\(|\\s++\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.pscd",
          "match": "(\\b[A-Za-z][a-zA-Z0-9_]+\\b)(?=\\s*[:,<>=oOyY\\-+*)]|\\s*div|\\s*mod|\\s*NO|\\s*No|\\s*no)"
        } 
      ]
    },
    "variables-after-aritmetic-operator": {
      "patterns": [
        {
          "name": "variable.other.pscd",
          "match": "((?<=\\+|\\*|\\s-|\\\/|\\sdiv\\s|\\smod\\s|\\sHasta\\s|\\shasta\\s|\\<-\\s|\\←\\s)\\s*\\w++)"
        } 
      ]
    },
    "variables-single-char": {
      "patterns": [
        {
          "name": "variable.other.pscd",
          "match": "([A-Za-z](?=(,|\\s*=|\\s*\\*|\\s*\\+|\\s*\\\/|\\s++div\\s++|\\s++mod\\s++|\\s*<|\\s*>|\\s*=|\\s*\\))))"
        }
      ]
    }
  }
}
